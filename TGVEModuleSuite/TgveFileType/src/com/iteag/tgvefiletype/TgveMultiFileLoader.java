/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iteag.tgvefiletype;

import com.jme3.gde.core.assets.BinaryModelDataObject;
import java.io.IOException;
import java.util.logging.Logger;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectExistsException;
import org.openide.loaders.ExtensionList;
import org.openide.loaders.FileEntry;
import org.openide.loaders.MultiDataObject;
import org.openide.loaders.MultiDataObject.Entry;
import org.openide.loaders.MultiFileLoader;

/**
 * This class is an example of extending the MultiFileLoader class. There
 * weren't any examples/tutorials on the web that I could find, so here's
 * one. This code utilizes source that was originally written by Ian Formanek, 
 * and located at 
 * http://alvinalexander.com/java/jwarehouse/netbeans-src/form/src/org/netbeans/modules/form/FormDataLoader.java.shtml
 * . <br/> 
 * <p>This example has three FileObjects tied together: <br/>
 * 1. {name}.tgve - the Primary File Entry, whose code is written in XML. It's 
 * interaction is primarily meant to be visual based editing in coordination with 
 * the .j3o entry<br/>
 * 2. {name}.java - a Secondary File Entry, which contains automatically generated
 * code derived from the Primary. This is the "product" of this sample, and can be
 * detached safely.<br/>
 * 3. {name}.j3o - a Secondary File Entry, which contains a JME Scene generated by
 * the Primary.  It is not recomended to use this as a product, though I suspect it
 * could be utilized.<p/>
 * @author Charles Anderson
 */
@DataObject.Registration(position = 400, displayName = "T0neG0d VisEdit file", iconBase = "com/iteag/tgvefiletype/GUI_Icon.png", mimeType = "text/x-tgve")
public class TgveMultiFileLoader extends MultiFileLoader{
    private static final Logger logger = Logger.getLogger(TgveMultiFileLoader.class.getName());
    public static final String PROP_EXTENSIONS = "extensions";
    public static final String EXTLIST_TGVE_EXTENSION = "tgve";
    public static final String EXTLIST_TGVE_MIME_TYPE = "text/x-tgve";
    public static final String EXTLIST_JAVA_EXTENSION = "java";
    public static final String EXTLIST_JAVA_MIME_TYPE = "text/x-java";
    public static final String EXTLIST_J3O_EXTENSION = "j3o";
    public static final String EXTLIST_J3O_MIME_TYPE = "application/jme3model";
    static final long serialVersionUID = 201409231519010101L; //yyyymmddttttvvbbmm
    
    public TgveMultiFileLoader(){
        this("com.iteag.tgvefiletype.TgveDataObject");
    }
    
    public TgveMultiFileLoader(String RepresentationClassString){
        super(RepresentationClassString);
    }
    
    @Override
    protected void initialize(){
        super.initialize();
        ExtensionList extensions = new ExtensionList();
        extensions.addExtension(EXTLIST_TGVE_EXTENSION);
        extensions.addMimeType(EXTLIST_TGVE_MIME_TYPE);
        extensions.addExtension(EXTLIST_JAVA_EXTENSION);
        extensions.addMimeType(EXTLIST_JAVA_MIME_TYPE);
        extensions.addExtension(EXTLIST_J3O_EXTENSION);
        extensions.addMimeType(EXTLIST_J3O_MIME_TYPE);
        putProperty(PROP_EXTENSIONS, extensions);
    }
    
    @Override
     protected String actionsContext () {
        return "Loaders/text/x-tgve/Actions/"; // NOI18N
    }

    /**
     * For a given file, returns the Primary file.
     * <p>
     * In this instance, this is a mandatory override for extending
     * the MultiFileLoader class.  So, I use a Java 1.7 string switch statement
     * set to filter out the files that are important to my MultiDataObject. 
     * </p>
     * @param fo a FileObject that might be used by this loader to create a 
     * TgveDataObject.
     * @return FileObject of the Primary FileObject, or null if not applicable.
     */
    @Override
    protected FileObject findPrimaryFile(FileObject fo) {
        // TODO: Learn about findPrimaryFile
        if (fo.isFolder()) return null;
        String fileExtension = fo.getExt();
        if(fileExtension.equalsIgnoreCase(EXTLIST_TGVE_EXTENSION))
            return fo;
        if(fileExtension.equalsIgnoreCase(EXTLIST_JAVA_EXTENSION))
            return FileUtil.findBrother(fo, EXTLIST_TGVE_EXTENSION);
        if(fileExtension.equalsIgnoreCase(EXTLIST_J3O_EXTENSION))
            return FileUtil.findBrother(fo, EXTLIST_TGVE_EXTENSION);
        return null;
        
     }

    /**
     * Creates the right data object for a given primary file. It is guaranteed 
     * that the provided file will actually be the primary file returned by 
     * <code>findPrimaryFile(org.openide.filesystems.FileObject)</code>.<br/>
     * 
     * Also, here is where I check and make sure that the .java and .j3o files 
     * are up and running.
     * 
     * @param primaryFile the Primary file for a TgveDataObject .tgve
     * @return a new MultiDataObject that can safely be cast (TgveDataObject)MultiDataObject.
     * @throws DataObjectExistsException
     * @throws IOException 
     */
    @Override
    protected MultiDataObject createMultiObject(FileObject primaryFile) throws DataObjectExistsException, IOException {
        //TODO: check if all files are present for the primaryFile, if not, create.
        TgveDataObject localTDO;
        localTDO = new TgveDataObject(primaryFile, this);
        if(FileUtil.findBrother(primaryFile, EXTLIST_JAVA_EXTENSION) == null) {
            logger.warning(primaryFile + ".java does not exist. Creating new file.");
            // create new .java file
        } else {
            
        }
        if(FileUtil.findBrother(primaryFile, EXTLIST_J3O_EXTENSION) == null) {
            logger.warning(primaryFile + ".j3o does not exist. Creating new file.");
            // create new .j3o scene file
        } 
        //TODO: bingo?
        return localTDO;
    }

    @Override
    protected MultiDataObject.Entry createPrimaryEntry(MultiDataObject obj, FileObject primaryFile) {
        //TODO: learn about createPrimaryEntry / make sure to ignore folders.
        if (primaryFile.isFolder()) return null;
        Entry e = new FileEntry(obj, primaryFile);
        return e;
    }

    @Override
    protected MultiDataObject.Entry createSecondaryEntry(MultiDataObject obj, FileObject secondaryFile) {
        if (secondaryFile.isFolder()) return null;
        Entry e = new FileEntry(obj, secondaryFile);
        return e;
    }
    
    protected ExtensionList getExtensions(){
        ExtensionList ext = (ExtensionList)getProperty(PROP_EXTENSIONS);
        if(ext == null){
            ext = new ExtensionList();
            ext.addExtension(EXTLIST_TGVE_EXTENSION);
            ext.addMimeType(EXTLIST_TGVE_MIME_TYPE);
            ext.addExtension(EXTLIST_JAVA_EXTENSION);
            ext.addMimeType(EXTLIST_JAVA_MIME_TYPE);
            ext.addExtension(EXTLIST_J3O_EXTENSION);
            ext.addMimeType(EXTLIST_J3O_MIME_TYPE);
            putProperty(PROP_EXTENSIONS, ext, false); 
        }
        return ext;
    }
    
    protected void setExtensions(ExtensionList ext){
        putProperty(PROP_EXTENSIONS, ext, true);
    }
}
